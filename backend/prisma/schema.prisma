generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                   @id @default(cuid())
  email              String                   @unique
  password           String
  name               String
  role               Role                     @default(STUDENT)
  isVerified         Boolean                  @default(false)
  deviceId           String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  attendanceLogs     AttendanceLog[]
  attendanceSessions AttendanceSession[]      @relation("SessionCreator")
  studentEnrollments ClassEnrollment[]
  teacherClasses     Class[]                  @relation("TeacherClasses")
  emailTokens        EmailVerificationToken[]

  @@map("users")
}

model Class {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  teacherId          String
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  attendanceSessions AttendanceSession[]
  enrollments        ClassEnrollment[]
  teacher            User                @relation("TeacherClasses", fields: [teacherId], references: [id])

  @@map("classes")
}

model ClassEnrollment {
  id         String   @id @default(cuid())
  studentId  String
  classId    String
  enrolledAt DateTime @default(now())
  class      Class    @relation(fields: [classId], references: [id])
  student    User     @relation(fields: [studentId], references: [id])

  @@unique([studentId, classId])
  @@map("class_enrollments")
}

model AttendanceSession {
  id             String          @id @default(cuid())
  teacherId      String
  classId        String
  title          String?
  startTime      DateTime
  endTime        DateTime
  locationLat    Float?
  locationLng    Float?
  radiusMeters   Int?            @default(100)
  qrCode         String?         @unique
  qrExpiresAt    DateTime?
  isActive       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  attendanceLogs AttendanceLog[]
  class          Class           @relation(fields: [classId], references: [id])
  teacher        User            @relation("SessionCreator", fields: [teacherId], references: [id])

  @@map("attendance_sessions")
}

model AttendanceLog {
  id        String            @id @default(cuid())
  studentId String
  sessionId String
  deviceId  String
  checkedAt DateTime          @default(now())
  status    AttendanceStatus  @default(PRESENT)
  latitude  Float?
  longitude Float?
  session   AttendanceSession @relation(fields: [sessionId], references: [id])
  student   User              @relation(fields: [studentId], references: [id])

  @@unique([studentId, sessionId])
  @@map("attendance_logs")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model DeviceRegistration {
  id         String   @id @default(cuid())
  userId     String
  deviceId   String
  deviceInfo String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())

  @@unique([userId, deviceId])
  @@map("device_registrations")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
  INVALID
}
