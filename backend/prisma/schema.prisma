// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
  INVALID
}

// User model
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  name          String
  role          Role     @default(STUDENT)
  isVerified    Boolean  @default(false)
  deviceId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  teacherClasses       Class[]            @relation("TeacherClasses")
  studentEnrollments   ClassEnrollment[]
  attendanceLogs       AttendanceLog[]
  attendanceSessions   AttendanceSession[] @relation("SessionCreator")
  emailTokens          EmailVerificationToken[]

  @@map("users")
}

// Class model
model Class {
  id          String   @id @default(cuid())
  name        String
  description String?
  teacherId   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher              User                @relation("TeacherClasses", fields: [teacherId], references: [id])
  enrollments          ClassEnrollment[]
  attendanceSessions   AttendanceSession[]

  @@map("classes")
}

// Class enrollment (Many-to-many relationship between User and Class)
model ClassEnrollment {
  id        String   @id @default(cuid())
  studentId String
  classId   String
  enrolledAt DateTime @default(now())

  // Relations
  student User @relation(fields: [studentId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])

  @@unique([studentId, classId])
  @@map("class_enrollments")
}

// Attendance session (created by teacher)
model AttendanceSession {
  id           String   @id @default(cuid())
  teacherId    String
  classId      String
  startTime    DateTime
  endTime      DateTime
  locationLat  Float?
  locationLng  Float?
  radiusMeters Int?     @default(100)
  qrCode       String   @unique
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())

  // Relations
  teacher        User            @relation("SessionCreator", fields: [teacherId], references: [id])
  class          Class           @relation(fields: [classId], references: [id])
  attendanceLogs AttendanceLog[]

  @@map("attendance_sessions")
}

// Attendance log (student check-in record)
model AttendanceLog {
  id        String           @id @default(cuid())
  studentId String
  sessionId String
  deviceId  String
  checkedAt DateTime         @default(now())
  status    AttendanceStatus @default(PRESENT)
  latitude  Float?
  longitude Float?

  // Relations
  student User            @relation(fields: [studentId], references: [id])
  session AttendanceSession @relation(fields: [sessionId], references: [id])

  @@unique([studentId, sessionId])
  @@map("attendance_logs")
}

// Email verification tokens
model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

// Device registration
model DeviceRegistration {
  id         String   @id @default(cuid())
  userId     String
  deviceId   String
  deviceInfo String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())

  @@unique([userId, deviceId])
  @@map("device_registrations")
}
